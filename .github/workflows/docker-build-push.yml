name: Build and Push Docker Images

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check for changes
        id: changes
        run: |
          echo "java_changed=$(git diff --name-only HEAD~1 HEAD | grep -E '\.(java|kt|gradle|yml)$' | grep -v 'docker-compose.yml\|\.github' | wc -l)" >> $GITHUB_OUTPUT
          echo "config_changed=$(git diff --name-only HEAD~1 HEAD | grep -E '(docker-compose\.yml|nginx\.conf|deploy\.sh)$' | wc -l)" >> $GITHUB_OUTPUT

      - name: Set up JDK 21
        if: steps.changes.outputs.java_changed > 0
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'zulu'
          cache: 'gradle'
          cache-dependency-path: |
            **/*.gradle*
            **/gradle-wrapper.properties
            **/gradle/libs.version.toml

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: api
          push: true
          tags: |
            ahj0/fairy-band:api
            ahj0/fairy-band:api-${{ github.sha }}
          platforms: linux/amd64

      - name: Build and push Batch image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: batch
          push: true
          tags: |
            ahj0/fairy-band:batch
            ahj0/fairy-band:batch-${{ github.sha }}
          platforms: linux/amd64

      - name: Build and push Admin image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: admin
          push: true
          tags: |
            ahj0/fairy-band:admin
            ahj0/fairy-band:admin-${{ github.sha }}
          platforms: linux/amd64

      - name: Discord notification for build
        if: always()
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "üê≥ Docker Ïù¥ÎØ∏ÏßÄ ÎπåÎìú Î∞è Ìë∏Ïãú"
          description: |
            **ÏÉÅÌÉú**: ${{ job.status }}
            **Î∏åÎûúÏπò**: ${{ github.ref_name }}
            **Ïª§Î∞ã**: ${{ github.sha }}
            **Ïª§Î∞ã Î©îÏãúÏßÄ**: ${{ github.event.head_commit.message }}
          color: ${{ job.status == 'success' && '0x57F287' || '0xED4245' }}
          username: GitHub Actions

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: always() && (needs.build-and-push.result == 'success' || needs.build-and-push.result == 'skipped')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Gabia private key file
        run: |
          echo "${{ secrets.GABIA_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem

      - name: Install sshpass
        run: sudo apt-get install -y sshpass

      - name: Create deploy directory and set permissions
        env:
          SSHPASS: ${{ secrets.SSH_PASSWORD }}
        run: |
          export SSHPASS="${SSHPASS}"
          echo "Creating deploy directory..."
          sshpass -e ssh -i private_key.pem -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "mkdir -p ~/deploy && chmod 755 ~/deploy"

      - name: Create .env file from secret
        run: |
          echo "${{ secrets.ENV_FILE_CONTENT }}" > .env
          cat .env | wc -l

      - name: Deploy configuration files one by one
        env:
          SSHPASS: ${{ secrets.SSH_PASSWORD }}
        run: |
          export SSHPASS="${SSHPASS}"

          # First copy docker-compose.yml
          echo "Deploying docker-compose.yml..."
          sshpass -e scp -i private_key.pem -v -o StrictHostKeyChecking=no deploy/docker-compose.yml ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:~/deploy/

          # Then copy nginx.conf
          echo "Deploying nginx.conf..."
          sshpass -e scp -i private_key.pem -v -o StrictHostKeyChecking=no deploy/nginx.conf ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:~/deploy/

          # Copy .env file
          echo "Deploying .env file..."
          sshpass -e scp -i private_key.pem -v -o StrictHostKeyChecking=no .env ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:~/deploy/

          # Finally copy deploy.sh
          echo "Deploying deploy.sh..."
          sshpass -e scp -i private_key.pem -v -o StrictHostKeyChecking=no deploy/deploy.sh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:~/deploy/

          # Make deploy.sh executable
          echo "Making deploy.sh executable..."
          sshpass -e ssh -i private_key.pem -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "chmod +x ~/deploy/deploy.sh"

      - name: Execute deployment script
        env:
          SSHPASS: ${{ secrets.SSH_PASSWORD }}
        run: |
          export SSHPASS="${SSHPASS}"
          echo "Executing deployment script..."
          sshpass -e ssh -i private_key.pem -v -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "cd ~/deploy && ./deploy.sh"

      - name: Discord notification for deployment
        if: always()
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "üöÄ ÏÑúÎ≤Ñ Î∞∞Ìè¨"
          description: |
            **ÏÉÅÌÉú**: ${{ job.status }}
            **Î∏åÎûúÏπò**: ${{ github.ref_name }}
            **Ïª§Î∞ã**: ${{ github.sha }}
            **Ïª§Î∞ã Î©îÏãúÏßÄ**: ${{ github.event.head_commit.message }}
            **Î∞∞Ìè¨ ÏãúÍ∞Ñ**: ${{ github.event.repository.updated_at }}
          color: ${{ job.status == 'success' && '0x57F287' || '0xED4245' }}
          username: GitHub Actions
