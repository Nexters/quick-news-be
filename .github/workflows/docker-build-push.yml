name: Build and Push Docker Images

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      deployment_strategy:
        description: '배포 전략 선택'
        required: true
        default: 'blue-green-gradual'
        type: choice
        options:
        - 'traditional'
        - 'blue-green-gradual'
        - 'blue-green-immediate'

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check for changes
        id: changes
        run: |
          echo "java_changed=$(git diff --name-only HEAD~1 HEAD | grep -E '\.(java|kt|gradle|yml)$' | grep -v 'docker-compose.yml\|\.github' | wc -l)" >> $GITHUB_OUTPUT
          echo "config_changed=$(git diff --name-only HEAD~1 HEAD | grep -E '(docker-compose\.yml|nginx\.conf|deploy\.sh)$' | wc -l)" >> $GITHUB_OUTPUT

      - name: Set up JDK 21
        if: steps.changes.outputs.java_changed > 0
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'zulu'
          cache: 'gradle'
          cache-dependency-path: |
            **/*.gradle*
            **/gradle-wrapper.properties
            **/gradle/libs.version.toml

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: api
          push: true
          tags: |
            ahj0/fairy-band:api
            ahj0/fairy-band:api-${{ github.sha }}
          platforms: linux/amd64

      - name: Build and push Batch image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: batch
          push: true
          tags: |
            ahj0/fairy-band:batch
            ahj0/fairy-band:batch-${{ github.sha }}
          platforms: linux/amd64

      - name: Build and push Admin image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: admin
          push: true
          tags: |
            ahj0/fairy-band:admin
            ahj0/fairy-band:admin-${{ github.sha }}
          platforms: linux/amd64

      - name: Discord notification for build
        if: always()
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "🐳 Docker 이미지 빌드 및 푸시"
          description: |
            **상태**: ${{ job.status }}
            **브랜치**: ${{ github.ref_name }}
            **커밋**: ${{ github.sha }}
            **커밋 메시지**: ${{ github.event.head_commit.message }}
          color: ${{ job.status == 'success' && '0x57F287' || '0xED4245' }}
          username: GitHub Actions

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: always() && (needs.build-and-push.result == 'success' || needs.build-and-push.result == 'skipped')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH known_hosts
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts
          # Create empty known_hosts2 file to avoid SSH warning
          touch ~/.ssh/known_hosts2
          chmod 600 ~/.ssh/known_hosts2

      - name: Create Gabia private key file
        run: |
          echo "${{ secrets.GABIA_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem

      - name: Create deploy directory and set permissions
        run: |
          echo "Creating deploy directory..."
          ssh -i private_key.pem ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "mkdir -p ~/deploy && chmod 755 ~/deploy"

      - name: Create .env file from secret
        run: |
          echo "${{ secrets.ENV_FILE_CONTENT }}" > .env
          cat .env | wc -l

      - name: Create Firebase service account key file
        run: |
          # Create Firebase service account key file directly from GitHub Secrets
          echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}' > firebase-service-account.json
          echo "Firebase service account key file created with $(wc -c < firebase-service-account.json) bytes"

      - name: Deploy configuration files for Blue-Green deployment
        run: |
          # Copy all Blue-Green deployment files
          echo "Deploying Blue-Green configuration files..."
          
          # Docker compose files
          scp -i private_key.pem -v deploy/docker-compose-blue.yml ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:~/deploy/
          scp -i private_key.pem -v deploy/docker-compose-green.yml ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:~/deploy/
          scp -i private_key.pem -v deploy/docker-compose-nginx.yml ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:~/deploy/
          
          # Original compose for backward compatibility
          scp -i private_key.pem -v deploy/docker-compose.yml ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:~/deploy/

          # Nginx configurations
          scp -i private_key.pem -v deploy/nginx.conf ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:~/deploy/
          scp -i private_key.pem -v deploy/nginx-blue-green.conf ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:~/deploy/
          scp -i private_key.pem -v deploy/active-env.conf ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:~/deploy/

          # Environment and credentials
          scp -i private_key.pem -v .env ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:~/deploy/
          scp -i private_key.pem -v firebase-service-account.json ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:~/deploy/

          # Deployment scripts
          scp -i private_key.pem -v deploy/deploy.sh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:~/deploy/
          scp -i private_key.pem -v deploy/deploy-blue-green.sh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:~/deploy/
          scp -i private_key.pem -v deploy/switch-env.sh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:~/deploy/

          # Make scripts executable
          echo "Making scripts executable..."
          ssh -i private_key.pem ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "chmod +x ~/deploy/*.sh"

      - name: Execute deployment script
        run: |
          DEPLOYMENT_STRATEGY="${{ github.event.inputs.deployment_strategy || 'blue-green-gradual' }}"
          echo "Executing deployment with strategy: $DEPLOYMENT_STRATEGY"
          
          case $DEPLOYMENT_STRATEGY in
            "traditional")
              echo "Running traditional deployment..."
              ssh -i private_key.pem -v ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "cd ~/deploy && ./deploy.sh"
              ;;
            "blue-green-gradual")
              echo "Running Blue-Green gradual deployment..."
              ssh -i private_key.pem -v ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "cd ~/deploy && CI=true ./deploy-blue-green.sh gradual"
              ;;
            "blue-green-immediate")
              echo "Running Blue-Green immediate deployment..."
              ssh -i private_key.pem -v ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "cd ~/deploy && CI=true ./deploy-blue-green.sh immediate"
              ;;
            *)
              echo "Unknown deployment strategy: $DEPLOYMENT_STRATEGY, falling back to Blue-Green gradual"
              ssh -i private_key.pem -v ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "cd ~/deploy && CI=true ./deploy-blue-green.sh gradual"
              ;;
          esac

      - name: Discord notification for deployment
        if: always()
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "🚀 서버 배포"
          description: |
            **상태**: ${{ job.status }}
            **브랜치**: ${{ github.ref_name }}
            **배포 전략**: ${{ github.event.inputs.deployment_strategy || 'blue-green-gradual (auto)' }}
            **커밋**: ${{ github.sha }}
            **커밋 메시지**: ${{ github.event.head_commit.message }}
            **배포 시간**: ${{ github.event.repository.updated_at }}
          color: ${{ job.status == 'success' && '0x57F287' || '0xED4245' }}
          username: GitHub Actions
